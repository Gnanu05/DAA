import sys
class Graph():
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for __ in range(vertices)]
    def min_key(self, key, visited):
        min_val = sys.maxsize
        min_index = 0
        for v in range(self.V):
            if key[v] < min_val and not visited[v]:
                min_val = key[v]
                min_index = v
        return min_index
    def mst(self):
        parent = [None] * self.V
        key = [sys.maxsize] * self.V
        key[0] = 0
        visited = [False] * self.V
        parent[0] = -1
        for _ in range(self.V):
            u = self.min_key(key, visited)
            visited[u] = True
            for v in range(self.V):
                if self.graph[u][v] > 0 and not visited[v] and key[v] > self.graph[u][v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u
        for i in range(1, self.V):
            print(f"{parent[i]} - {i}  {self.graph[i][parent[i]]}")
g = Graph(5)
g.graph = [
    [0, 2, 0, 6, 0],
    [2, 0, 3, 8, 5],
    [0, 3, 0, 0, 7],
    [6, 8, 0, 0, 9],
    [0, 5, 7, 9, 0]
]

g.mst()
